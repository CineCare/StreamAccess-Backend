// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  pseudo String
  email String @unique
  password String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar String?
  prefs Prefs[]
  movieComments MovieComment[]
}

model Prefs {
  id Int @id @default(autoincrement())
  userId Int
  name String
  value String
  profileName String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PrefType {
  id Int @id @default(autoincrement())
  prefName String @unique
  dataType String
}

model Movie {
  id Int @id @default(autoincrement())
  title String @unique
  releaseYear Int
  image String?
  producerId Int?
  producer Producer? @relation(fields: [producerId], references: [id], onDelete: SetNull)
  directorId Int?
  director Director? @relation(fields: [directorId], references: [id], onDelete: SetNull)
  shortSynopsis String? @db.VarChar(500)
  longSynopsis String ? @db.VarChar(2000)
  teamComment String? @db.VarChar(2000)
  history String? @db.VarChar(2000)
  tags MovieTagMovie[]
  comments MovieComment[]
}

model Producer {
  id Int @id @default(autoincrement())
  name String
  biography String? @db.VarChar(2000)
  movies Movie[]
}

model Director {
  id Int @id @default(autoincrement())
  name String
  biography String? @db.VarChar(2000)
  movies Movie[]
}

model MovieTag {
  id Int @id @default(autoincrement())
  label String
  icon String @default("default")
  movieTagsMovies MovieTagMovie[]
}

model MovieTagMovie {
  id Int @id @default(autoincrement())
  movieId Int
  tagId Int
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  tag MovieTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model MovieComment {
  id Int @id @default(autoincrement())
  movieId Int
  userId Int
  content String @db.VarChar(600)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}